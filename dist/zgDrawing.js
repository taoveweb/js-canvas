!function(e){var t={};function n(a){if(t[a])return t[a].exports;var i=t[a]={i:a,l:!1,exports:{}};return e[a].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,a){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(n.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(a,i,function(t){return e[t]}.bind(null,i));return a},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t){var n,a,i,o,r,c,l,s,u,d,f,v,p,h;n=window,d={canvas_w:1e3,canvas_h:600,canvas_id:"canvas",color:"black",line:{line:1,lineCap:"round",lineJoin:"round",pattern:"line",color:"#000000"},rec:{line:3,lineCap:"round",lineJoin:"round",pattern:"line",color:"#4B0082"},arc:{line:3,lineCap:"round",lineJoin:"round",pattern:"line",color:"#4B0082"},font:{color:"#FF0000",spec:"small"},arrows:{},pattern:"font"},f=[],v=[],p=[],h=!1,n.Drawing=function(e={},t=null){for(let t in e)d[t]=e[t];u=document.getElementById(d.canvas_id),d.canvas_w=u.offsetWidth,d.canvas_h=u.offsetHeight,(a=document.createElement("canvas")).setAttribute("width",d.canvas_w),a.setAttribute("height",d.canvas_h),u.appendChild(a),u.insertAdjacentHTML("afterbegin",'\n                <div class="canvas-nav">\n                  <div class="item _withdraw">撤回</div>\n                  <div class="item _line">线</div>\n                  <div class="item _rec">矩形</div>\n                  <div class="item _arc">圆</div>\n                  <div class="item _font">写字</div>\n                  <div class="item _arrows">箭头</div>\n                  \n                </div>\n            '),document.querySelector(".canvas-nav ._withdraw").addEventListener("click",function(e){f.length>0&&(v=[],p=[],1==f.length?(f.pop(),a.getContext("2d").clearRect(0,0,d.canvas_w,d.canvas_h)):(f.pop(),a.getContext("2d").putImageData(f[f.length-1],0,0)),console.log(f))}),document.querySelector(".canvas-nav ._font").addEventListener("click",function(e){d.pattern="font"}),document.querySelector(".canvas-nav ._line").addEventListener("click",function(e){d.pattern="line"}),document.querySelector(".canvas-nav ._rec").addEventListener("click",function(e){d.pattern="rce"}),document.querySelector(".canvas-nav ._arc").addEventListener("click",function(e){d.pattern="arc"});const n=e=>{let t=a.getContext("2d");return t.lineCap=d[e].lineCap,t.lineJoin=d[e].lineJoin,t.lineWidth=d[e].line,t.strokeStyle=d[e].color,t},g=(e,t,n)=>{let a=e.getBoundingClientRect();return{x:t-a.left*(e.width/a.width),y:n-a.top*(e.height/a.height)}};function m(e,t,n,a){this.x=e,this.y=t,this.width=n,this.height=a}function y(e,t,n,a){this.x=e,this.y=t,this.xr=n,this.yr=a}function _(e,t,n,a,i){e.save();var o=a>i?a:i,r=a/o,c=i/o;e.scale(r,c),e.beginPath(),e.arc(t/r,n/c,o,0,2*Math.PI,!1),e.closePath(),e.restore(),e.stroke()}a.onmousedown=function(e){if("line"==d.pattern){h=!0;let t=g(a,e.clientX,e.clientY);l=t.x,s=t.y,(o=n("line")).beginPath(),o.moveTo(l,s)}else if("rce"==d.pattern){h=!0;let t=g(a,e.clientX,e.clientY);l=t.x,s=t.y,r=n("rec")}else if("arc"==d.pattern){h=!0;let t=g(a,e.clientX,e.clientY);l=t.x,s=t.y,c=n("arc")}else if("font"==d.pattern){let t=g(a,e.clientX,e.clientY),n=document.querySelector("._canvas .canvas-textarea");n?n.onblur=function(e){if(n.value){let e=a.getContext("2d"),t=n.offsetTop;switch(d.font.spec){case"small":e.font="14px Georgia normal",t+=14;break;case"middle":e.font="18px Georgia normal",t+=18;break;default:e.font="24px Georgia bold",t+=24}e.fillStyle=d.font.color,e.fillText(n.value,n.offsetLeft,t),u.removeChild(n),f.push(a.getContext("2d").getImageData(0,0,d.canvas_w,d.canvas_h))}}:((n=document.createElement("textarea")).setAttribute("class","canvas-textarea"),u.appendChild(n),n.style.left=t.x+"px",n.style.top=t.y+"px",n.focus())}},a.onmousemove=e=>{if("line"==d.pattern){if(h){let t=g(a,e.clientX,e.clientY),{x:n,y:i}=t;o.lineTo(n,i),o.stroke()}}else if("rce"==d.pattern){if(h){let t=g(a,e.clientX,e.clientY);r.clearRect(0,0,d.canvas_w,d.canvas_h),f.length>0&&r.putImageData(f[f.length-1],0,0),v.forEach(function(e,t,n){r.strokeRect(e.x,e.y,e.width,e.height)});let n=t.x-l,o=t.y-s;r.strokeRect(l,s,n,o),i=new m(l,s,n,o)}}else if("arc"==d.pattern&&h){let t=g(a,e.clientX,e.clientY);c.clearRect(0,0,d.canvas_w,d.canvas_h),f.length>0&&c.putImageData(f[f.length-1],0,0),p.forEach(function(e,t,n){_(c,e.x,e.y,e.xr,e.yr)});let n=Math.abs((t.x-l)/2),o=Math.abs((t.y-s)/2),r=t.x-(t.x-l)/2,u=t.y-(t.y-s)/2;_(c,r,u,n,o),i=new y(r,u,n,o)}},a.onmouseup=function(){"line"==d.pattern?(h=!1,f.push(a.getContext("2d").getImageData(0,0,d.canvas_w,d.canvas_h))):"rce"==d.pattern?(h=!1,v.push(i),f.push(a.getContext("2d").getImageData(0,0,d.canvas_w,d.canvas_h))):"arc"==d.pattern&&(h=!1,p.push(i),f.push(a.getContext("2d").getImageData(0,0,d.canvas_w,d.canvas_h))),console.log(f)},m.prototype={constructor:m,getConfig:function(){return this}},y.prototype={constructor:y,getConfig:function(){return this}},window.onresize=function(){}},new Drawing}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,